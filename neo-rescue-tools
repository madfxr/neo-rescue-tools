#!/bin/bash
# Made with ✨ Magic ©️ Nur Mukhammad Agus (https://github.com/madfxr), 2024. Free and Open Source Software (FOSS).
printf "\n\e[1;36m\e[5m          ようこそ\e[0m\e[1;36m\e[0m\n"
printf "███╗   ██╗███████╗ ██████╗\n"
printf "████╗  ██║██╔════╝██╔═══██╗\n"
printf "██╔██╗ ██║█████╗  ██║   ██║\n"
printf "██║╚██╗██║██╔══╝  ██║   ██║\n"
printf "██║ ╚████║███████╗╚██████╔╝\n"
printf "╚═╝  ╚═══╝╚══════╝ ╚═════╝\n"
printf "\e[1;36m      - RESCUE TOOLS -\e[0m\n"

declare -a image_ids=("0905f508-f240-4ab2-adca-d70d9e4a9e98:JKT-2" "0ad464f1-865d-41dc-a269-a9b7dabeb22c:WJV-2" "fc0d86a9-e795-4d69-b2ba-8fe1d7b1f4de:BTN-1")

print_gparted_image_options() {
    for ((i=0; i<${#image_ids[@]}; i++)); do
        IFS=':' read -r image_id label <<< "${image_ids[i]}"
        printf "%d. %s\n" "$((i+1))" "$label"
    done
}

select_image_id() {
    read -rp $'\e[1;33mSELECT GPARTED LIVE IMAGE: \e[0m' choice
    index=$(($choice - 1))
    if (( index >= 0 && index < ${#image_ids[@]} )); then
        IFS=':' read -r image_id label <<< "${image_ids[index]}"
        printf "%s\n" "$image_id"
    else
        printf "\e[1;31m[ERROR] Invalid Option, Please Try Again!!\e[0m\n"
        exit 1
    fi
}

print_instance_list() {
    printf "[INFORMATION] List of Instances for Project ID \e[1;36m%s\e[0m\n" "$project_id"
    openstack server list --os-project-id "$project_id"
}

print_instance_status() {
    instance_id="$1"
    openstack server show "$instance_id" --os-project-id "$project_id"
}

print_console_url() {
    printf "[INFORMATION] This is the URL Console of the Instance \e[1;36m%s\e[0m\n" "$instance_id"
    openstack console url show "$instance_id" --os-project-id "$project_id"
}

show_member_info() {
    local image_id="$1"
    local project_id="$2"

    if [[ -n "$project_id" ]]; then
        if openstack image member list "$image_id" | grep -q "$project_id"; then
            printf "[INFORMATION] Current Member of Image \e[1;36m%s\e[0m\n" "$image_id"
            openstack image member list "$image_id"
        else
            printf "[INFORMATION] No Project ID Added on Image \e[1;36m%s\e[0m\n" "$image_id"
        fi
    else
        printf "\e[1;31m[ERROR] No Project ID Specified!\e[0m\n"
    fi
}

add_user_role() {
    local user_id="$1"
    local project_id="$2"
    local role_id="$3"
    
    openstack role add --user "$user_id" --project "$project_id" "$role_id"
}

remove_user_role() {
    local user_id="$1"
    local project_id="$2"
    local role_id="$3"
    
    openstack role remove --user "$user_id" --project "$project_id" "$role_id"
}

print_user_info() {
    printf "\n\e[1;31m[INFORMATION] List of Users That Exist in OpenStack\e[0m\n"
    openstack user list
}

print_role_info() {
    printf "\n\e[1;31m[INFORMATION] List of Roles That Exist in OpenStack\e[0m\n"
    openstack role list
}

print_user_role_info() {
    print_user_info
    print_role_info
}

print_menu() {
    printf "\n\e[4m\e[1;36mMENU\e[0m\n"
    printf "D. Show Domain Information\n"
    printf "A. Add User Role to Project\n"
    printf "R. Remove User Role from Project\n"
    printf "U. Show User Role from Project\n"
    printf "I. Show Instance List\n"
    printf "1. Add GParted Live Image to Project\n"
    printf "2. Show Image Member Information\n"
    printf "3. Rescue Instance\n"
    printf "4. Unrescue Instance\n"
    printf "5. Show Instance Console\n"
    printf "6. Remove GParted Live Image from Project\n"
    printf "X. Exit\n"
}

while :
do
    print_menu
    read -rp $'\e[1;33mENTER MENU: \e[0m' option

    case $option in
        D|d)
            printf "\e[1;31m[INFORMATION] List of Domains That Exist in OpenStack\e[0m\n"
            openstack domain list
            ;;
        A|a)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            printf "[BEFORE] List of User Roles for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack role assignment list --project "$project_id" --name
            print_user_role_info
            read -rp $'\e[1;33mINSERT USER ID: \e[0m' user_id
            read -rp $'\e[1;33mINSERT ROLE ID: \e[0m' role_id
            add_user_role "$user_id" "$project_id" "$role_id"
            printf "[COMPLETED] User \e[1;36m%s\e[0m Has Been Added to Project ID \e[1;36m%s\e[0m\n" "$user_id" "$project_id"
            printf "[AFTER] List of User Roles for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack role assignment list --user "$user_id"
            openstack role assignment list --project "$project_id" --name
            ;;
        R|r)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            printf "[BEFORE] List of User Roles for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack role assignment list --project "$project_id" --name
            print_user_role_info
            read -rp $'\e[1;33mINSERT USER ID: \e[0m' user_id
            read -rp $'\e[1;33mINSERT ROLE ID: \e[0m' role_id
            remove_user_role "$user_id" "$project_id" "$role_id"
            printf "[COMPLETED] User \e[1;36m%s\e[0m Has Been Removed from Project ID \e[1;36m%s\e[0m\n" "$user_id" "$project_id"
            printf "[AFTER] List of User Roles for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack role assignment list --user "$user_id"
            openstack role assignment list --project "$project_id" --name
            ;;
       	U|u)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            printf "[INFORMATION] List of User Roles for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack role assignment list --project "$project_id" --name
            ;;
        I|i)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            print_instance_list
            ;;
          1)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            print_gparted_image_options
            image_id=$(select_image_id)
            
            project_assigned=$(openstack image show "$image_id" -c properties -f value | grep -o '"os_project_id": "[^"]\+"' | cut -d: -f2 | tr -d '" ')
            if [ -z "$project_assigned" ]; then
                printf "[COMPLETED] Image \e[1;36m%s\e[0m Has Been Added to Project ID \e[1;36m%s\e[0m\n" "$image_id" "$project_id"
                openstack image add project "$image_id" "$project_id"
                openstack image set --accept "$image_id" --os-project-id "$project_id"
            else
                printf "[WARNING] Image \e[1;36m%s\e[0m Already Added to Project ID \e[1;36m%s\e[0m\n" "$image_id" "$project_id"
            fi
            ;;
          2)
            print_gparted_image_options
            image_id=$(select_image_id)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            show_member_info "$image_id" "$project_id"
            ;;
          3)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            printf "[BEFORE] List of Instances for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack server list --os-project-id "$project_id"
            read -rp $'\e[1;33mINSERT INSTANCE ID: \e[0m' instance_id
            print_gparted_image_options
            image_id=$(select_image_id)  
            if ! openstack server rescue --os-project-id "$project_id" "$instance_id" --image "$image_id"; then
                printf "\e[1;31m[ERROR] Instance Not Found or Error Inserting Instance ID!\e[0m\n"
            fi
            printf "\e[1;31m[INFORMATION] Please Wait a Moment to Display the Latest Instance Status!\e[0m\n"
            sleep 15
            printf "[AFTER] List of Instances for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack server list --os-project-id "$project_id"
            ;;
          4)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            printf "[BEFORE] List of Instances for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack server list --os-project-id "$project_id"
            read -rp $'\e[1;33mINSERT INSTANCE ID: \e[0m' instance_id
            if ! openstack server unrescue --os-project-id "$project_id" "$instance_id"; then
                printf "\e[1;31m[ERROR] Instance Not Found or Error Inserting Instance ID!\e[0m\n"
            fi
            printf "\e[1;31m[INFORMATION] Please Wait a Moment to Display the Latest Instance Status!\e[0m\n"
            sleep 10
            printf "[AFTER] List of Instances for Project ID \e[1;36m%s\e[0m\n" "$project_id"
            openstack server list --os-project-id "$project_id"
            ;;
          5)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            print_instance_list
            read -rp $'\e[1;33mINSERT INSTANCE ID: \e[0m' instance_id
            print_console_url
            ;;
          6)
            read -rp $'\e[1;33mINSERT PROJECT ID: \e[0m' project_id
            print_gparted_image_options
            image_id=$(select_image_id)
            openstack image remove project "$image_id" "$project_id"
            printf "[COMPLETED] Image \e[1;36m%s\e[0m Has Been Removed from Project ID \e[1;36m%s\e[0m\n" "$image_id" "$project_id"
            ;;
        X|x)
            printf "\e[1;31m[INFORMATION] Exit from NEO Rescue Tools!\e[0m\n"
            exit 0
            ;;
          *)
            printf "\e[1;31m[ERROR] Invalid Option, Please Try Again!!\e[0m\n"
            ;;
    esac
done
